<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.myzqu.ygmall.dao.CategoriesMapper">
  <resultMap id="BaseResultMap" type="cn.myzqu.ygmall.pojo.Categories">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="parent_level" jdbcType="INTEGER" property="parentLevel" />
    <result column="grand_level" jdbcType="INTEGER" property="grandLevel" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <resultMap id="allCategoriesName" type="cn.myzqu.ygmall.vo.CategoriesAttributeVO">
    <id column="id" jdbcType="INTEGER" property="categoryId" />
    <association property="categoriesName" column="id" select="cn.myzqu.ygmall.dao.CategoriesMapper.completeCategoriesCId" fetchType="eager"></association>
    <association property="attributes" column="id" select="cn.myzqu.ygmall.dao.AttributeMapper.selectByCategoryId" fetchType="eager"></association>
  </resultMap>
  <sql id="Base_Column_List">
    id, name, parent_level, grand_level, status
  </sql>

  <select id="completeCategories" parameterType="java.lang.String" resultType="java.lang.String">
    select CONCAT(c3.`name` ,'>',c2.`name`,'>',c1.`name`) as type
    from goods
    left join categories c1 ON c1.id = goods.category_id
    left join  categories c2 ON c2.id = c1.parent_level
    left join  categories c3 ON c3.id = c2.parent_level
    WHERE goods.id = #{id}
</select>
  <select id="completeCategoriesSpu" parameterType="java.lang.String" resultType="java.lang.String">
    select CONCAT(c3.`name` ,'>',c2.`name`,'>',c1.`name`) as type
    from spu
    left join categories c1 ON c1.id = spu.category_id
    left join  categories c2 ON c2.id = c1.parent_level
    left join  categories c3 ON c3.id = c2.parent_level
    WHERE spu.id =#{id}
  </select>

  <select id="completeCategoriesCId" parameterType="int" resultType="java.lang.String">
    select distinct CONCAT(c3.`name` ,'>',c2.`name`,'>',c1.`name`) as type
    from categories
    inner join categories c1 ON c1.id = #{categoryId}
    inner join  categories c2 ON c2.id = c1.parent_level
    inner join  categories c3 ON c3.id = c2.parent_level
  </select>

  <select id="allCategoriesName" resultMap="allCategoriesName">
    SELECT id
    FROM categories
    where parent_level is not null and grand_level is not null
  </select>

<!--bySimon-->
  <select id="findAllCategories" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM categories
  </select>
  <select id="findAllCategoriesId" resultType="int">
    SELECT id FROM categories
  </select>
  <select id="findAllL1Categories" resultMap="BaseResultMap">
    SELECT id,name,status FROM categories where parent_level is null and grand_level is null
  </select>
  <select id="findAllL3Categories" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM categories
    where parent_level is not null and grand_level is not null
  </select>
  <select id="getL23CategoriesById" parameterType="int" resultMap="BaseResultMap">
    SELECT id,name,status FROM categories WHERE parent_level=#{id}
  </select>



  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from categories
    where id = #{id,jdbcType=INTEGER}
  </select>

  <!--bySimon-->
  <delete id="deleteCategories" parameterType="int">
    delete from categories where id=#{id}
  </delete>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from categories
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <!--bySimon-->
  <insert id="insertCategories" parameterType="cn.myzqu.ygmall.pojo.Categories">
    insert into categories values (#{id},#{name},#{parentLevel},#{grandLevel},#{status})
  </insert>


  <insert id="insert" parameterType="cn.myzqu.ygmall.pojo.Categories">
    insert into categories (id, name, parent_level, 
      grand_level, status)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{parentLevel,jdbcType=INTEGER}, 
      #{grandLevel,jdbcType=INTEGER}, #{status,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="cn.myzqu.ygmall.pojo.Categories">
    insert into categories
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="parentLevel != null">
        parent_level,
      </if>
      <if test="grandLevel != null">
        grand_level,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentLevel != null">
        #{parentLevel,jdbcType=INTEGER},
      </if>
      <if test="grandLevel != null">
        #{grandLevel,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>


  <!--bySimon-->
  <update id="updateCategories" parameterType="cn.myzqu.ygmall.pojo.Categories">
    update categories set name=#{name},status=#{status} where id=#{id}
  </update>

  <update id="updateByPrimaryKeySelective" parameterType="cn.myzqu.ygmall.pojo.Categories">
    update categories
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentLevel != null">
        parent_level = #{parentLevel,jdbcType=INTEGER},
      </if>
      <if test="grandLevel != null">
        grand_level = #{grandLevel,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.myzqu.ygmall.pojo.Categories">
    update categories
    set name = #{name,jdbcType=VARCHAR},
      parent_level = #{parentLevel,jdbcType=INTEGER},
      grand_level = #{grandLevel,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>